import random
'''
p and q are generated by the algoritm.
r is a pre-shared key.
'''
p,q=0,0
def gen_nums():
    global p,q
    if not is_prime(p):
        p=random.randint(100,1000)
    if not is_prime(q):
        q=random.randint(100,1000)
    if p==q:
        gen_nums()
def gcd(a,b):
    while b!=0:
        a,b = b,a%b
    return a
'''
///////////////////////////////////////////////////
This is known as the 6k ± 1 optimization method.
///////////////////////////////////////////////////
function is_prime(n)
    if n ≤ 3
        return n > 1
    else if n mod 2 = 0 or n mod 3 = 0
        return false
    let i ← 5
    while i * i ≤ n
        if n mod i = 0 or n mod (i + 2) = 0
            return false
        i ← i + 6
    return true
///////////////////////////////////////////////////
'''
def is_prime(n):
    if n<=3:
        return n>1      #if less than or equal to 3{3,2,1} return true if n=2 or 3
    if n % 2 == 0 or n % 3 ==0:
        return False
    # for num in range(3,n)
    i=5
    while i*i<=n:
        if n%i == 0 or n % (i+2)==0:
            return False
        i+=6
    return True

def multipl_inv(e,tot):
    # d= (1+k mod(tot))/e
    k=0
    d=(1+k*tot)/e
    while not(d.is_integer()):
        k+=1
        d=(1+k*tot)/e
    return d
def convertToBin():
    global r
    r=int(input("Enter the Pre-shared Key"))
    e=publicKey[1]
    d=privateKey[1]
    e=e^r
    d=d^r

def gen_key():
    global p,q
    while not(is_prime(p) and is_prime(q)):
        gen_nums()
    #calculate n
    n=p*q
    #calculate Euler's totient
    tot=(p-1)*(q-1)
    #for public key
    e=0
    while gcd(e,tot)!=1:
        e=random.randint(1,tot)
    publicKey=(n,e)
    d=int(multipl_inv(e,tot))
    privateKey=(n,d)
    return(publicKey,privateKey)


def main():
    global publicKey, privateKey
    publicKey, privateKey = gen_key()
    convertToBin()
    encrypt(4)
    writeToFile()

def encrypt(num):
    global encrypted
    n,e=publicKey
    encrypted=(num**e)%n
    print(encrypted)

    decrypt()

def decrypt():
    global decrypted
    n,d=privateKey
    decrypted=(encrypted**d)%n
    print(decrypted)

def writeToFile():
    file1=open("try1.txt","a")
    strToWrite="\nPrimeNumbers="+str(p)+" "+str(q)+"\n"
    strToWrite+="publicKey="+str(publicKey[0])+" "+str(publicKey[1])+"\n"
    strToWrite+="privateKey"+str(privateKey[0])+" "+str(privateKey[1])+"\n"
    strToWrite+="encrypted="+str(encrypted)+"\n"
    strToWrite+="decrypted="+str(decrypted)+"\n"
    file1.write(strToWrite)
    file1.close()

main()
